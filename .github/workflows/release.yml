name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  release:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v5
      with:
        fetch-depth: 0  # Fetch full history for changelog generation
    
    - name: Set up Go
      uses: actions/setup-go@v6
      with:
        go-version: '1.25'
    
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-1.25-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-1.25-
    
    - name: Get dependencies
      run: go mod download
    
    - name: Run tests
      run: go test -v ./...
    
    - name: Run go vet
      run: go vet ./...
    
    - name: Install staticcheck
      run: go install honnef.co/go/tools/cmd/staticcheck@latest
    
    - name: Run staticcheck
      run: staticcheck ./...
    
    - name: Build cross-platform binaries
      run: |
        mkdir -p dist
        VERSION="${{ github.ref_name }}"
        COMMIT="${{ github.sha }}"
        
        # Build for multiple platforms
        GOOS=linux GOARCH=amd64 go build -ldflags "-X main.version=${VERSION} -X main.commit=${COMMIT}" -o dist/octojoin-linux-amd64 .
        GOOS=linux GOARCH=arm64 go build -ldflags "-X main.version=${VERSION} -X main.commit=${COMMIT}" -o dist/octojoin-linux-arm64 .
        GOOS=darwin GOARCH=amd64 go build -ldflags "-X main.version=${VERSION} -X main.commit=${COMMIT}" -o dist/octojoin-darwin-amd64 .
        GOOS=darwin GOARCH=arm64 go build -ldflags "-X main.version=${VERSION} -X main.commit=${COMMIT}" -o dist/octojoin-darwin-arm64 .
        GOOS=windows GOARCH=amd64 go build -ldflags "-X main.version=${VERSION} -X main.commit=${COMMIT}" -o dist/octojoin-windows-amd64.exe .
        
        # Create checksums
        cd dist
        sha256sum * > checksums.txt
    
    - name: Generate release notes
      run: |
        # Extract version from tag
        VERSION="${{ github.ref_name }}"
        echo "# Release $VERSION" > release_notes.md
        echo "" >> release_notes.md
        
        # Get commits since last tag
        LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        if [ -n "$LAST_TAG" ]; then
          echo "## Changes since $LAST_TAG" >> release_notes.md
          echo "" >> release_notes.md
          git log --pretty=format:"- %s" $LAST_TAG..HEAD >> release_notes.md
        else
          echo "## Changes in this release" >> release_notes.md
          echo "" >> release_notes.md
          git log --pretty=format:"- %s" --max-count=20 >> release_notes.md
        fi
        
        echo "" >> release_notes.md
        echo "## Downloads" >> release_notes.md
        echo "" >> release_notes.md
        echo "Choose the appropriate binary for your platform:" >> release_notes.md
        echo "" >> release_notes.md
        echo "- **Linux (x64)**: octojoin-linux-amd64" >> release_notes.md
        echo "- **Linux (ARM64)**: octojoin-linux-arm64" >> release_notes.md
        echo "- **macOS (Intel)**: octojoin-darwin-amd64" >> release_notes.md
        echo "- **macOS (Apple Silicon)**: octojoin-darwin-arm64" >> release_notes.md
        echo "- **Windows (x64)**: octojoin-windows-amd64.exe" >> release_notes.md
        echo "" >> release_notes.md
        echo "All binaries include SHA256 checksums for verification." >> release_notes.md
    
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          dist/*
        body_path: release_notes.md
        draft: false
        prerelease: ${{ contains(github.ref_name, '-') }}
        generate_release_notes: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}